// Code generated by MockGen. DO NOT EDIT.
// Source: file/commands/read-markdown-file-from-repo.command.go

// Package commands is a generated GoMock package.
package commands

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v52/github"
)

// MockGitHubClient is a mock of GitHubClient interface.
type MockGitHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientMockRecorder
}

// MockGitHubClientMockRecorder is the mock recorder for MockGitHubClient.
type MockGitHubClientMockRecorder struct {
	mock *MockGitHubClient
}

// NewMockGitHubClient creates a new mock instance.
func NewMockGitHubClient(ctrl *gomock.Controller) *MockGitHubClient {
	mock := &MockGitHubClient{ctrl: ctrl}
	mock.recorder = &MockGitHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClient) EXPECT() *MockGitHubClientMockRecorder {
	return m.recorder
}

// GetContents mocks base method.
func (m *MockGitHubClient) GetContents(ctx context.Context, owner, repo, path string, opt *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", ctx, owner, repo, path, opt)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].([]*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContents indicates an expected call of GetContents.
func (mr *MockGitHubClientMockRecorder) GetContents(ctx, owner, repo, path, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockGitHubClient)(nil).GetContents), ctx, owner, repo, path, opt)
}
